<%
// ----------------------------------------------------------------------------
// \file : topics.pas     This file is part of my HelpNDoc.com tools.
// \autor: Jens Kallup    paule32 aka Blacky Cat aka Jens Kallup
// \date : 2025 (c) all rights reserved.
//
// \detail
// Project. Tested in an HelpNDoc.com CHM Project.
// ----------------------------------------------------------------------------
var currentTemplate: Integer;
var
    aTopicList: THndTopicsInfoArray;
var
    headContent, htmlContent, topicCaption, s1: String;
var
    nCurTopic, nCurParent, nTopicKind, nHeaderKind, nFooterKind: integer;
var
    sCharset, sTopicHeader, sTopicFooter, sRelativeTopic: string;
var
    aBreadCrumb: array of String;

function RemoveSpaces(const Input: string): string;
var
  i: Integer;
  c: Char;
  Temp, str: string;
begin
  Temp := '';
  str := '';
  // Zuerst Umlaute ersetzen
  for i := 1 to Length(Input) do
  begin
    case Input[i] of
      'Ä': Temp := Temp + 'A';
      'ä': Temp := Temp + 'a';
      'Ö': Temp := Temp + 'O';
      'ö': Temp := Temp + 'o';
      'Ü': Temp := Temp + 'U';
      'ü': Temp := Temp + 'u';
      'ß': Temp := Temp + 's';
    else
      Temp := Temp + Input[i];
    end;
  end;
  
  // Danach nur alphanumerische Zeichen übernehmen
  Result := '';
  for i := 1 to Length(Temp) do
  begin
    c := Temp[i];
    if c in ['A'..'Z', 'a'..'z', '0'..'9'] then
    str := str + c;
  end;
  
  str := Copy(str,1,32);
  result := str;
end;
    
    function getTemplateHeaderHtml: String;
    var aTopicID: String;
    var topicCaption: String;
    begin
        result := '';    
        // Get first topic
        aTopicId := HndTopics.GetTopicFirst();
        // Loop through all topics
        while aTopicID <> '' do
        begin
            topicCaption := HndTopics.GetTopicCaption(aTopicID);
            if (TopicCaption = 'VorlageHeader' )
            or (TopicCaption = 'TemplateHeader') then
            begin
                result := HndTopics.GetTopicContentAsHtml(aTopicID);
                break;
            end;
            aTopicID := HndTopics.GetTopicNext(aTopicId);
        end;
    end;
    
    function getTemplateHtml: String;
    var aTopicID, content: String;
    var topicCaption: String;
    begin
        result := '';
        // Get first topic
        aTopicId := HndTopics.GetTopicFirst();
        // Loop through all topics
        while aTopicID <> '' do
        begin
            topicCaption := HndTopics.GetTopicCaption(aTopicID);
            if (TopicCaption = 'Vorlage') then
            begin
                result := HndTopics.GetTopicContentAsHtml(aTopicID);
                break
            end;
            aTopicID := HndTopics.GetTopicNext(aTopicId);
        end;
    end;
    
    function getNextTopic: String;
    var
        aTopicList: THndTopicsInfoArray;
        aTopic: String;
    begin
        result := '#';
        aTopic := RemoveSpaces(
                  HndTopics.GetTopicCaption(
                  HndTopics.GetTopicNext(
                  HndTopics.GetCurrentTopic)));
        if Length(Trim(aTopic)) > 0 then
        begin
            result := aTopic;
            exit;
        end;
    end;
    
    function getPrevTopic: String;
    var
        aTopicList: THndTopicsInfoArray;
        aTopic: String;
    begin
        result := '#';
        aTopic := RemoveSpaces(
                  HndTopics.GetTopicCaption(
                  HndTopics.GetTopicPrevious(
                  HndTopics.GetCurrentTopic)));
        if Length(Trim(aTopic)) > 0 then
        begin
            result := aTopic;
            exit;
        end;
    end;

        
    function GetCompatibilityModeMeta(): string;
    var
        sVersion: string;
    begin
        Result := '';
        sVersion := HndGeneratorInfo.GetCustomSettingValue('IECompatibilityMode');
        if Copy(sVersion, 1, 3) = 'IE=' then
            Result := Format('<meta http-equiv="X-UA-Compatible" content="%s">', [sVersion]);
    end;

    function GetCustomCss: string;
    begin
        Result := HndGeneratorInfo.GetCustomSettingValue('CustomCss');
        if (Result <> '') then
            Result := '<style type="text/css">' + Result + '</style>';
    end;

    function GetCustomJs: string;
    begin
        Result := HndGeneratorInfo.GetCustomSettingValue('CustomJs');
        if (Result <> '') then
            Result := '<script type="text/javascript">try{' + #13#10 + Result + #13#10 + '}catch(e){alert("Exception in custom JavaScript Code: " + e);}</script>';
    end;

    // Return the topic extension, starting with a dot
    function GetTopicExtension: string;
    begin
        Result := Trim(HndGeneratorInfo.TemplateInfo.TopicExtension);
        if ((Length(Result) > 0) and (Result[1] <> '.')) then
            Result := '.' + Result;
    end;

    // Returns the footer
    function GetTemplateHtmlFooter: string;
    begin
        Result := HndGeneratorInfo.GetCustomSettingValue('Footer');
    end;
    
    // Returns the description of the topic
    function GetTopicDescription: string;
    begin
        // Get value
        Result := HndTopics.GetTopicDescription(HndGeneratorInfo.CurrentTopic);
        // Empty ? Use project's description instead
        if (Result = '') then Result := HndProjects.GetProjectSummary;
    end;

begin
    // UTF-8 or project charset ?
    if HndGeneratorInfo.GetCustomSettingValue('UseCharsetForTopics') then
    begin
        // Use project charset
        HndGeneratorInfo.BOMOutput := False;
        HndGeneratorInfo.ForceOutputEncoding := True;
        sCharset := HndProjects.GetProjectCharsetAsHtml();
    end
    else begin
        // Need BOM for UTF8 files
        HndGeneratorInfo.BOMOutput := True;
        sCharset := 'UTF-8';
    end;

    // Output global CSS content
    HndGeneratorInfo.CurrentFile := 'css\hnd.css';
    print(HndProjects.GetProjectCssContent());
    
    // Each individual topics generated...
    aTopicList := HndTopicsEx.GetTopicListGenerated(False, False);
    for nCurTopic := 0 to length(aTopicList) - 1 do
    begin
        // Notify about the topic being generated
        HndGeneratorInfo.CurrentTopic := aTopicList[nCurTopic].id;
        // Topic kind
        nTopicKind := aTopicList[nCurTopic].Kind;
        if (nTopicKind = 1) then continue;  // Empty topic: do not generate anything
        // Setup the file name
        HndGeneratorInfo.CurrentFile := HndTopics.GetTopicHelpId(HndGeneratorInfo.CurrentTopic) + GetTopicExtension();
        // Topic header
        nHeaderKind := HndTopics.GetTopicHeaderKind(HndGeneratorInfo.CurrentTopic);
        sTopicHeader := HndTopics.GetTopicHeaderTextCalculated(HndGeneratorInfo.CurrentTopic);
        // Topic footer
        nFooterKind := HndTopics.GetTopicFooterKind(HndGeneratorInfo.CurrentTopic);
        sTopicFooter := HndTopics.GetTopicFooterTextCalculated(HndGeneratorInfo.CurrentTopic);
        // Create the breadcrumb
        aBreadCrumb.SetLength(0);
        if HndGeneratorInfo.GetCustomSettingValue('ShowBreadCrumbs') then
        begin
            sRelativeTopic := HndTopics.GetTopicParent(HndGeneratorInfo.CurrentTopic);
            while (sRelativeTopic <> '') and (sRelativeTopic <> HndTopics.GetProjectTopic()) do
            begin
                aBreadCrumb.SetLength(Length(aBreadCrumb) + 1);
                aBreadCrumb[Length(aBreadCrumb) - 1] := sRelativeTopic;
                sRelativeTopic := HndTopics.GetTopicParent(sRelativeTopic);
            end;
        end;

%><!DOCTYPE html>

<html>
    
<head>
    <title><% print(HTMLEncode(HndTopics.GetTopicCaption(HndGeneratorInfo.CurrentTopic))); %></title>
    <meta http-equiv="Content-Type" content="text/html; charset=<% print(sCharset); %>">
    <% print(GetCompatibilityModeMeta()); %>
    <meta name="description" content="<% print(HTMLEncode(GetTopicDescription())); %>" />
    <meta name="generator" content="<% print(HTMLEncode(HndGeneratorInfo.HelpNDocVersion)); %>" />
    
    <%
        // Redirect for URL and Files topic
        if (nTopicKind = 2) then
        begin
          printf('<meta http-equiv="refresh" content="0;URL=%s">', [HndTopics.GetTopicUrlLink(HndGeneratorInfo.CurrentTopic)]);
        end
        else begin
    %>
    
    <link type="text/css" rel="stylesheet" media="all" href="css/reset.css" />
    <link type="text/css" rel="stylesheet" media="all" href="css/base.css" />
    <link type="text/css" rel="stylesheet" media="all" href="css/hnd.css" />
    <!--[if lte IE 8]>
        <link type="text/css" rel="stylesheet" media="all" href="css/ielte8.css" />
    <![endif]-->

    <style type="text/css">
        #topic_header
        {
            background-color: #<% print(HndUtils.TColorToHex(HndGeneratorInfo.GetCustomSettingValue('BaseColor'))); %>;
        }
    </style>

    <% print(GetCustomCss()); %>

    <script type="text/javascript" src="js/chmRelative.js"></script>
    
    <%
        end;
    %>
</head>

<body>

<%
    // Redirect for URL and Files topic
    if (nTopicKind = 2) then
    begin
      printf('<a href="%s">Redirecting... click here if nothing happens</a>', [HndTopics.GetTopicUrlLink(HndGeneratorInfo.CurrentTopic)]);
    end
    else begin
%>

    <% if nHeaderKind <> 2 then begin %>
        <div id="topic_header">
            <div id="topic_header_content">
                <h1><% print(HTMLEncode(sTopicHeader)); %></h1>
                
                <%
                    if Length(aBreadCrumb) > 0 then
                    begin
                %>
                <div id="topic_breadcrumb">
                    <%
                        for nCurParent := Length(aBreadCrumb) - 1 downto 0 do
                        begin
                            // Empty topic
                            if (HndTopics.GetTopicKind(aBreadCrumb[nCurParent]) = 1) then
                            begin
                                printf('%s &rsaquo;&rsaquo; ', [HTMLEncode(HndTopics.GetTopicCaption(aBreadCrumb[nCurParent]))]);
                            end
                            // Normal topic
                            else begin
                                printf('<a href="%s%s">%s</a> &rsaquo;&rsaquo; ', [HndTopics.GetTopicHelpId(aBreadCrumb[nCurParent]), GetTopicExtension(), HTMLEncode(HndTopics.GetTopicCaption(aBreadCrumb[nCurParent]))]);
                            end;
                        end;
                    %>
                </div>
                <%
                    end;
                %>
            </div>
            <%
                if HndGeneratorInfo.GetCustomSettingValue('ShowNavigation') then
                begin
            %>
            <div id="topic_header_nav">
                <%
                    sRelativeTopic := HndTopics.GetTopicParent(HndGeneratorInfo.CurrentTopic);
                    if (sRelativeTopic <> '') and (sRelativeTopic <> HndTopics.GetProjectTopic()) 
                       and (HndTopics.GetTopicKind(sRelativeTopic) <> 1)  // Skip blank topics
                    then
                    begin
                %>
                
                <a href="<% printf('%s%s', [HndTopics.GetTopicHelpId(sRelativeTopic), GetTopicExtension()]); %>"><img src="img/arrow_up.png" alt="Parent"/></a>
                
                <%
                    end;
                    // Previous topic included in TOC
                    sRelativeTopic := HndTopicsEx.GetTopicPreviousGenerated(HndGeneratorInfo.CurrentTopic, True);
                    while (HndTopics.GetTopicKind(sRelativeTopic) = 1) do  // Skip blank topics
                        sRelativeTopic := HndTopicsEx.GetTopicPreviousGenerated(sRelativeTopic, True);
                    if (sRelativeTopic <> '') and (sRelativeTopic <> HndTopics.GetProjectTopic()) then
                    begin
                %>
                
                <a href="<% printf('%s%s', [HndTopics.GetTopicHelpId(sRelativeTopic), GetTopicExtension()]); %>"><img src="img/arrow_left.png" alt="Previous"/></a>
                
                <%
                    end;
                    // Next topic included in TOC
                    sRelativeTopic := HndTopicsEx.GetTopicNextGenerated(HndGeneratorInfo.CurrentTopic, True);
                    while (HndTopics.GetTopicKind(sRelativeTopic) = 1) do  // Skip blank topics
                        sRelativeTopic := HndTopicsEx.GetTopicNextGenerated(sRelativeTopic, True);
                    if (sRelativeTopic <> '') and (sRelativeTopic <> HndTopics.GetProjectTopic()) then
                    begin
                %>
                
                <a href="<% printf('%s%s', [HndTopics.GetTopicHelpId(sRelativeTopic), GetTopicExtension()]); %>"><img src="img/arrow_right.png" alt="Next"/></a>
                
                <%
                    end;
                %>
            </div>
            <%
                end;
            %>
            <div class="clear"></div>
        </div>
    <% end; %>
    
    <div id="topic_content">
        <%
            topicCaption := HndTopics.GetTopicCaption(HndGeneratorInfo.CurrentTopic);
            if not ((TopicCaption = 'Vorlage')
            or      (TopicCaption = 'Template')
            or      (TopicCaption = 'VorlageHeader'))
            then begin
                htmlContent := getTemplateHtml;
                htmlContent := StringReplace(
                    htmlContent,
                    '[::Template::]',
                    HndTopics.GetTopicContentAsHtml(HndGeneratorInfo.CurrentTopic),
                    [rfReplaceAll]);
                if Pos('[::TemplateMITLicense::]', htmlContent) > 0 then
                begin
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateMITLicense::]','',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateTitle::]',
                        'MIT - Lizenzen',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateContent::]',
                        'Lizenz',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateSubject::]',
                        'Bitte Lesen - Danke !',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateBottomLink::]',
                        '&nbsp;',
                        [rfReplaceAll]);
                end;
                if Pos('[::Template Common::]', htmlContent) > 0 then
                begin
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::Template Common::]','',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateTitle::]',
                        'Logik und Mengenlehre',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateContent::]',
                        'Lizenz',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateSubject::]',
                        'Bitte Lesen - Danke !',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateBottomLink::]',
                        '&nbsp;',
                        [rfReplaceAll]);
                end;
                if  Pos('[::Template Hessenberg::]', htmlContent) > 0 then
                begin
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateTitle::]',
                        'Logik und Mengenlehre',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateSubject::]',
                        'Über das Unendliche in der Mathematik',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateContent::]',
                        'G. Hessenberg',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateBottomLink::]',
                        '<b><i><a href="https://">Staats-Biblothek München/a></i></b>',
                        [rfReplaceAll]);
                end;
                if  Pos('[::Template DIN-5473::]', htmlContent) > 0 then
                begin
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::Template DIN-5473::]', '',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateTitle::]',
                        'Logik und Mengenlehre',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateSubject::]',
                        'Zeichen und Symbole',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateContent::]',
                        'DIN-5473',
                        [rfReplaceAll]);
                    htmlContent := StringReplace(
                        htmlContent,
                        '[::TemplateBottomLink::]',
                        '<b><i><a href="https://www.din.de/de">DIN - Deutsches Institut für Normung</a></i></b>',
                        [rfReplaceAll]);
                end;
                htmlContent := StringReplace(
                    htmlContent,
                    '[::Template_Date::]',
                    IntToStr(yearof(now)),
                    [rfReplaceAll]);
                htmlContent := StringReplace(
                    htmlContent,
                    '[::TemplateMDnewLine::]',
                    '<br>',
                    [rfReplaceAll]);
                
                s1 := getNextTopic;
                if s1 = '#' then
                s1 := '#' else
                s1 := s1 + '.htm';
                
                htmlContent := StringReplace(
                    htmlContent,
                    '[::NextTopic::]',
                    '<span class="nextlink"><a href="'+s1+'">Weiter >></a></span>',
                    [rfReplaceAll]);
                
                s1 := getPrevTopic;
                if s1 = '#' then
                s1 := '#' else
                s1 := s1 + '.htm';
                
                htmlContent := StringReplace(
                    htmlContent,
                    '[::PrevTopic::]',
                    '<span class="nextlink"><a href="'+s1+'"><< Zurück</a></span>',
                    [rfReplaceAll]);
                print(htmlContent);
            end;
        %>
    </div>
    
    <% if nFooterKind <> 2 then begin %>
        <div id="topic_footer">

            <div id="topic_footer_content">
                <% print(HTMLEncode(sTopicFooter)); %>
            </div>
        </div>
    <% end; %>

    <div id="custom_footer"><% print(GetTemplateHtmlFooter()); %></div>

    <% print(GetCustomJs()); %>
    
<%
    end;
%>
    
</body>
    
</html>

<%
    end;  // for nCurTopic
    
end.
%>